name: Deploy to PlatformIO

on:
  workflow_dispatch:
  # Start only after Build was finished
  workflow_run:
    workflows: [Build]
    branches: [main]
    types: [completed]

jobs:
  check-hsmcpp-version:
    runs-on: ubuntu-latest
    outputs:
      commit_version: ${{ steps.get_version.outputs.commit_version }}

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/workflows/get-commit-version
      id: get_version
      with:
        repo_dir: ${{ env.GITHUB_WORKSPACE }}
        commit_sha: ${{ github.event.workflow_run.head_sha }}
    - run: |
        echo "VERSION: '${{ steps.get_version.outputs.commit_version }}'"

  deploy-platformio-arduino:
    runs-on: ubuntu-latest
    needs: check-hsmcpp-version

    # only run for successful build after push event
    # avoid running this action on forks
    if: ${{ (github.repository == 'igor-krechetov/hsmcpp') && (needs.check-hsmcpp-version.outputs.commit_version != '') && ((github.event.workflow_run == null) || ((github.event.workflow_run.conclusion == 'success') && (github.event.workflow_run.event == 'push'))) }}

    env:
      target_dir: './platformio_deploy/'

    steps:
    # need to checkout current repo because workflow is not related with push event
    - uses: actions/checkout@v3
    - uses: ./.github/workflows/get-commit-version
      id: get_version
      with:
        repo_dir: ${{ env.GITHUB_WORKSPACE }}
        commit_sha: ${{ github.event.workflow_run.head_sha }}

    # setup environment
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    # checkout repositories
    - uses: actions/checkout@v3
      with:
        ref: main
        path: './main'
    - uses: actions/checkout@v3
      with:
        ref: platformio_library
        path: ${{ env.target_dir }}
    # prepare gpg for sommit signing
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true
        workdir: ${{ env.target_dir }}
    # deploy files
    - name: Generate package
      run: |
        cmake -S ./main -B ./main/build -DHSMBUILD_TARGET=package -DHSMBUILD_PLATFORM=arduino
        cmake --build ./main/build --target install
    - name: Copy package files to target repository
      run: cp -Rv ./main/build/deploy/* "$target_dir"
    - name: Publish PlatformIO package
      env:
        PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_TOKEN }}
      run: |
        pio pkg publish ./main/build/deploy --type library --no-interactive
    - name: Prepare commit message
      run: |
        cd ./main
        git log -1 --format=%B ${{ github.event.workflow_run.head_sha }} > ../commit.txt
    - name: Commit new files
      run: |
        cd "$target_dir"
        git add -A
        git commit -S -F ../commit.txt
        git push
